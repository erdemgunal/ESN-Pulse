services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: esn_pulse_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/schemas:/docker-entrypoint-initdb.d/schemas
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - esn_pulse_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: esn_pulse_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - esn_pulse_network

  # ESN Pulse Application
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: esn_pulse_app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - LOG_LEVEL=${LOG_LEVEL}
      - DEBUG=${DEBUG}
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - esn_pulse_network
    command: ["tail", "-f", "/dev/null"]

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: esn_pulse_worker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - app
    networks:
      - esn_pulse_network
    command: ["celery", "-A", "src.tasks.celery_app", "worker", "--loglevel=info"]

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: esn_pulse_beat
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - app
    networks:
      - esn_pulse_network
    command: ["celery", "-A", "src.tasks.celery_app", "beat", "--loglevel=info"]

  # Flower - Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: esn_pulse_flower
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - esn_pulse_network
    command: ["celery", "-A", "src.tasks.celery_app", "flower"]

volumes:
  postgres_data:
  redis_data:

networks:
  esn_pulse_network:
    driver: bridge 